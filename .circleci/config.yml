version: 2.1
orbs:
  node: circleci/node@5.0.0
  win: circleci/windows@2.4.1

executors:
  linux-amd:
    machine:
      image: ubuntu-2004:202111-02

  mac-amd:
    macos:
      xcode: 13.2.1

commands:
  install-npm:
    steps:
      - node/install:
          install-yarn: true
          node-version: "16.13.2"
  
  login-to-github-packages:
    steps:
      - run:
          name: Login to Github Packages
          command: |
            yarn config set always-auth true
            yarn config set @owlbear-rodeo:registry=https://npm.pkg.github.com:_authToken=$NPM_TOKEN
            npm config set @owlbear-rodeo:registry=https://npm.pkg.github.com:_authToken=$NPM_TOKEN
          environment:
            NPM_TOKEN: ${GITHUB_PACKAGE_TOKEN}
  
  install-dependencies:
    steps:
      - run:
          name: Install Dependencies
          command: yarn install --non-interactive --frozen-lockfile
          environment:
            NPM_TOKEN: ${GITHUB_PACKAGE_TOKEN}
  
  publish-electron-app:
    steps:
      - run:
          name: Publish
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run publish

jobs:
  publish-electron-app-linux-amd:
    executor: linux-amd
    working_directory: ~/repo
    steps:
      - install-npm
      - run:
          name: Install dpkg and fakeroot
          command: |
            sudo apt-get update -y
            sudo apt-get install -y dpkg fakeroot rpm
      - checkout
      - login-to-github-packages
      - restore_cache:
          key: dependency-cache-{{ checksum "package.json" }}
      - install-dependencies
      - save_cache:
          key: dependency-cache-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - publish-electron-app

  publish-electron-app-win:
    executor:
      name: win/default
      size: "medium"
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          command: |
            nvm install 16.13.2
            nvm use 16.13.2
            nvm alias default 16.13.2
            echo 'nvm use default &>/dev/null' >> $BASH_ENV
      - run:
          command: npm install -g corepack
      - restore_cache:
          key: dependency-cache-win-{{ checksum "package.json" }}
      - login-to-github-packages
      - install-dependencies
      - save_cache:
          key: dependency-cache-win-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - publish-electron-app

  publish-electron-app-mac-amd:
    executor: mac-amd
    working_directory: ~/repo
    environment:
      KENKU_FM_MAC_X64_PATH: "./out/Kenku\ FM-darwin-x64"
    steps:
      - install-npm
      - checkout
      - login-to-github-packages
      - restore_cache:
          key: dependency-cache-macos-{{ checksum "package.json" }}
      - install-dependencies
      - save_cache:
          key: dependency-cache-macos-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Make Package
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            yarn run make
      - run:
          name: Install Widevine Python Module
          command: python3 -m pip install --upgrade castlabs-evs
      - run:
          name: Widevine Signature
          command: |
            python3 -m castlabs_evs.account -n reauth -A "$CASTLABS_ACCOUNT_NAME" -P "$CASTLABS_ACCOUNT_PASSWORD"
            python3 -m castlabs_evs.vmp sign-pkg "$KENKU_FM_MAC_X64_PATH"
      - run:
          name: Import Apple Security Keychain
          command: |
            export CERTIFICATE_P12=certificate.p12;
            echo "${CERT_OSX_P12}"| base64 --decode -o $CERTIFICATE_P12;
            export KEYCHAIN=kenku-fm.keychain;
            security create-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
            security default-keychain -s "$KEYCHAIN";
            security unlock-keychain -p "${APPLE_KEYCHAIN_PASSWORD}" "$KEYCHAIN";
            security import "$CERTIFICATE_P12" -k "$KEYCHAIN" -P "${CERT_PASSWORD}" -A
            security set-key-partition-list -S apple-tool:,apple: -s -k "$APPLE_KEYCHAIN_PASSWORD" "$KEYCHAIN"
      - run:
          name: OSX Signature
          command: |
            npx electron-osx-sign "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.app --gatekeeper-assess=false --identity="Developer ID Application: Mitchell McCaffrey: (${APPLE_DEVELOPER_TEAM_ID})" --hardened-runtime=true --entitlements="entitlements.plist" --entitlements-inherit="entitlements.plist"
      - run:
          name: Zip App
          command: ditto -c -k --sequesterRsrc --keepParent "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.app "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.zip
      - run:
          name: Notarize Zip file
          command: xcrun notarytool submit "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.zip --apple-id "$APPLE_DEVELOPER_EMAIL" --password "$APPLE_DEVELOPER_PASSWORD" --team-id "$APPLE_DEVELOPER_TEAM_ID" --wait --output-format json
      - run:
          name: Staple
          command: xcrun stapler staple -v "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.app
      - run:
          name: Create DMG
          command: |
            npx electron-installer-dmg --background=./src/assets/dmg-background.png --icon=./src/assets/setup.icns --out="$KENKU_FM_MAC_X64_PATH"/ "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.app Kenku\ FM
      - run:
          name: Publish DMG
          command: |
            export GITHUB_TOKEN=${GITHUB_REPO_TOKEN}
            ./publish/script-macos.sh "$KENKU_FM_MAC_X64_PATH"/Kenku\ FM.dmg $GITHUB_TOKEN $CIRCLE_TAG Kenku.FM-$CIRCLE_TAG-x64.dmg

workflows:
  version: 2
  deploy-linux-amd:
    jobs:
      - publish-electron-app-linux-amd:
          filters: &tag
            tags:
              ignore: /^v[0-9]+(\.[0-9]+)*$/
            branches:
              only: main
  deploy-win:
    jobs:
      - publish-electron-app-win:
          filters: 
            <<: *tag
  deploy-mac-amd:
    jobs:
      - publish-electron-app-mac-amd:
          filters: 
            <<: *tag